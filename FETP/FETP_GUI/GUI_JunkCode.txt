From CalendarExtensions.cs:

	//for(int j=0; (j < (_schedule.Blocks.Count()) && _schedule.Blocks[j] != null); j++)
	//{
	//    nonNullBlocks[j] = _schedule.Blocks[j];
	//}

	// _schedule.Blocks[a].ClassesInBlock[0].StartTime.Hours.ToString() + ":" + _schedule.Blocks[a].ClassesInBlock[0].StartTime.Minutes.ToString();
	// _schedule.Blocks[a].ClassesInBlock[0].EndTime.Hours.ToString() + ":" + _schedule.Blocks[a].ClassesInBlock[0].EndTime.Minutes.ToString();

	// _schedule.Blocks[a].ClassesInBlock[0].StartTime.Hours.ToString() + ":" + _schedule.Blocks[a].ClassesInBlock[0].StartTime.Minutes.ToString();
	// _schedule.Blocks[a].ClassesInBlock[0].EndTime.Hours.ToString() + ":" + _schedule.Blocks[a].ClassesInBlock[0].EndTime.Minutes.ToString();

	// _schedule.Blocks[a].ClassesInBlock[0].StartTime.Hours.ToString() + ":" + _schedule.Blocks[a].ClassesInBlock[0].StartTime.Minutes.ToString();
	// _schedule.Blocks[a].ClassesInBlock[0].EndTime.Hours.ToString() + ":" + _schedule.Blocks[a].ClassesInBlock[0].EndTime.Minutes.ToString();

From FETP_Form.Designer.cs:
        
	//private DataCollection dataCollection1;

From FETP_Form.cs:

	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Data;
	using System.Globalization;
	using System.Linq;
	using System.Text;
	using System.Threading.Tasks;

    private static int NUMBER_OF_EXAMS_PER_DAY;// = 10;
    private static int NUMBER_OF_EXAMS; //= NUMBER_OF_DAYS * NUMBER_OF_EXAMS_PER_DAY;
	                            
	//FETP_Controller controller;
    //Dictionary<string, UserControl> views;

    //views = new Dictionary<string, UserControl>();
    
	//views.Clear();
	//views.Add("Full", fullCal);
    
	//if (views.Keys.Contains("Full"))
    //{
    //    fullCal = (FullCalendar)views["Full"];
    //}
    //else
    //{
    fullCal = new FullCalendar(schedule);
    //views.Add("Full", fullCal);
    //}
	
    //if (views.Keys.Contains("Single"))
    //{
    //    miniCal = (SingleDayCalendar)views["Single"];
    //}
    //else
    //{
    miniCal = new SingleDayCalendar(schedule);
    //    views.Add("Single", miniCal);
    //}

    //if (views.Keys.Contains("Text"))
    //{
    //    textCal = (TextSchedule)views["Text"];
    //}
    //else
    //{
    textCal = new TextSchedule(schedule);
    //    views.Add("Text", textCal);
    //}
	
    //views.Clear();
	
    //views.Add("Full", fullCal);

From FullCalendar.cs:
	using System.Collections.Generic;
	using System.Data;
	using System.Text;
	using System.Threading.Tasks;

    //private static int NUMBER_OF_DAYS = 4;
    //private static int NUMBER_OF_EXAMS_PER_DAY = 10;
		
    public FullCalendar()
    {
        //InitializeComponent();
        InitializeComponent(NUMBER_OF_DAYS, NUMBER_OF_EXAMS_PER_DAY);
    }

	//b.Text = b.Name;
                    
	// _schedule.Blocks[a].ClassesInBlock[0].StartTime.Hours.ToString() + ":" + _schedule.Blocks[a].ClassesInBlock[0].StartTime.Minutes.ToString();
	// _schedule.Blocks[a].ClassesInBlock[0].EndTime.Hours.ToString() + ":" + _schedule.Blocks[a].ClassesInBlock[0].EndTime.Minutes.ToString();
	            
    //Button temp = destination;
    //destination = source;
    //source = destination;
	
    //------------------------------------------------------------------------------------------

    //private Button dragSource;

    //private void button_MouseDown(object sender, MouseEventArgs e)
    //{
    //    dragSource = (Button)sender;
    //    dragSource.DoDragDrop(dragSource, DragDropEffects.Copy | DragDropEffects.Move);
    //}

    //private void button_DragEnter(object sender, DragEventArgs e)
    //{
    //    if (e.Data.GetType().Equals(typeof(Button)))
    //        e.Effect = DragDropEffects.Copy;
    //    else
    //        e.Effect = DragDropEffects.None;
    //}

    //private void button_DragDrop(object sender, DragEventArgs e)
    //{
    //    Button b = (Button)sender;

    //    Button temp = b;
    //    b = dragSource;
    //    dragSource = temp;
    //}

From FullCalendar.Designer.cs:
	
	The entire InitializeComponent() function

From SchedulePresenter.cs:

    ///<summary>
    ///Generic, unused SchedulePresenter constructor (this was made for design phase)
    ///</summary>
    public SchedulePresenter()
    {
        InitializeComponent();
    }

	//Blocks[i].Dock = DockStyle.Top;
	//Blocks[i].Text = Blocks[i].Name;
	//i++;

	//Blocks[i].Dock = DockStyle.Top;
	//Blocks[i].Text = Blocks[i].Name;
	//i++;

	//for(int j=0; (j < (_schedule.Blocks.Count()) && _schedule.Blocks[j] != null); j++)
    //{
    //    nonNullBlocks[j] = _schedule.Blocks[j];
    //}

	// _schedule.Blocks[a].ClassesInBlock[0].StartTime.Hours.ToString() + ":" + _schedule.Blocks[a].ClassesInBlock[0].StartTime.Minutes.ToString();
	// _schedule.Blocks[a].ClassesInBlock[0].EndTime.Hours.ToString() + ":" + _schedule.Blocks[a].ClassesInBlock[0].EndTime.Minutes.ToString();

	// _schedule.Blocks[a].ClassesInBlock[0].StartTime.Hours.ToString() + ":" + _schedule.Blocks[a].ClassesInBlock[0].StartTime.Minutes.ToString();
	// _schedule.Blocks[a].ClassesInBlock[0].EndTime.Hours.ToString() + ":" + _schedule.Blocks[a].ClassesInBlock[0].EndTime.Minutes.ToString();


From SchedulePresenter.Designer.cs:
	
	The entire InitializeComponent() function

From SingleDayCalendar.cs:
	
    //private static int NUMBER_OF_DAYS = 4;
    //private static int NUMBER_OF_EXAMS_PER_DAY = 10;
	
    public SingleDayCalendar()
    {
        InitializeComponent(NUMBER_OF_DAYS, NUMBER_OF_EXAMS_PER_DAY);
    }

	//b.Text = b.Name;

	//AutoScroll = true;

	// _schedule.Blocks[a].ClassesInBlock[0].StartTime.Hours.ToString() + ":" + _schedule.Blocks[a].ClassesInBlock[0].StartTime.Minutes.ToString();
	// _schedule.Blocks[a].ClassesInBlock[0].EndTime.Hours.ToString() + ":" + _schedule.Blocks[a].ClassesInBlock[0].EndTime.Minutes.ToString();

    //Button temp = destination;
    //destination = source;
    //source = destination;

From SingleDayCalendar.Designer.cs:
	
	The entire InitializeComponent() function

From TextSchedule.cs:

	using System.ComponentModel;
	using System.Drawing;
	using System.Data;
	using System.Linq;
	using System.Text;
	using System.Threading.Tasks;
	
    public TextSchedule()
    {
        InitializeComponent();
    }
	
    //else
    //{
    //    richTextBox1.Text += ("\nNOT GOOD: IN DisplayBlocks");
    //}
	
    /// <summary>
    /// Displays all information stored in a Block instance with formatting.
    /// </summary>
    public void DisplayBlock(Block block)
    {
        richTextBox1.Text += string.Format("\nNumber of Classes in Block: {0}", block.ClassesInBlock.Count);
        richTextBox1.Text += string.Format("\nTotal Enrollment: {0}", block.Enrollment);
        richTextBox1.Text += string.Format("\nAverage Enrollment: {0}", block.Average);
        richTextBox1.Text += string.Format("\nVariance: {0}", block.Variance);
        richTextBox1.Text += string.Format("\nStandard Deviation: {0}", block.StandardDeviation);
        richTextBox1.Text += string.Format("\nWeighted Average Starting Time: {0}", block.WeightedAverageStartTime);
    }
	
    //richTextBox1.Text += "\n";
	
    //richTextBox1.Text += string.Format("\nEnrollment: {0}", cl.Enrollment);
    //richTextBox1.Text += "\n";

From TextSchedule.Designer.cs: